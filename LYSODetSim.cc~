
// //#include "FTFP_BERT_HP.hh"
// #include "G4RadioactiveDecayPhysics.hh"
// #include "G4DecayPhysics.hh"
// #include "G4NeutronHPCapture.hh"
// #include "G4HadronicAbsorptionBertini.hh"
// //#include "G4HadronInelasticQBBC.hh"
// //#include "QBBC.hh"

#include "QGSP_BERT_HP.hh"
#include "G4PhysListFactory.hh"

#include "LYSODetPhysicsList.hh"

#include "LYSODetAnalysis.hh"
#include "LYSODetUserInformation.hh"
#include "LYSODetPrimaryGeneratorAction.hh"
#include "LYSODetConstruction.hh"
#include "LYSODetEventAction.hh"
#include "LYSODetRunAction.hh"
#include "LYSODetSteppingAction.hh"
#include "LYSODetSteppingVerbose.hh"
#include "LYSODetTrackingAction.hh"
#include "LYSODetTrackInformation.hh"

#include "G4RunManager.hh"
#include <G4UImanager.hh>
#include <G4UIExecutive.hh>
#include <G4UIterminal.hh>

#ifdef G4UI_USE_QT
#include "G4UIQt.hh"
#endif

#ifdef G4UI_USE_XM
#include "G4UIXm.hh"
#endif

#ifdef G4UI_USE_TCSH
#include "G4UItcsh.hh"
#endif

#ifdef G4VIS_USE
#include "G4VisExecutive.hh"
#endif



// #ifdef G4VIS_USE
// #include "LYSODetVisManager.hh"
// #endif

int main(int argc,char** argv) {


  CLHEP::HepRandom::setTheEngine(new CLHEP::RanecuEngine());

  //my Verbose output class
  G4VSteppingVerbose::SetInstance( new LYSODetSteppingVerbose() ); 
  
  // Run manager
  G4RunManager * runManager = new G4RunManager();

  // UserInitialization classes (mandatory)
  LYSODetUserInformation*       myLYSODetUserInformation  = new LYSODetUserInformation();
  LYSODetConstruction*          myLYSODetExperiment       = new LYSODetConstruction(myLYSODetUserInformation);
  LYSODetAnalysis*              myLYSODetAnalysis         = new LYSODetAnalysis();

  runManager->SetUserInitialization(myLYSODetExperiment);

  // G4PhysListFactory factory;
  // G4VModularPhysicsList* phys = 0;
  // G4String physName = "QGSP_BERT_HP";
  // phys = factory.GetReferencePhysList(physName);
  // runManager->SetUserInitialization(phys);
   runManager->SetUserInitialization(new LYSODetPhysicsList() );

  // G4NeutronHPCapture* captureModel = new G4NeutronHPCapture();
  // G4HadronCaptureProcess* capProcess = new G4HadronCaptureProcess();
  // capProcess->RegisterMe(captureModel);
  // processManager->AddDiscreteProcess(capProcess);
  // G4VUserPhysicsList *phys = new QGSP_BERT_HP();
   // G4String physName = "QGSP_BIC_HP";
   // G4String physName = "QBBC";
   // reference PhysicsList via its name
   // phys->RegisterPhysics(new G4QCaptureAtRestPhysics());
   // phys->RegisterPhysics(new G4RadioactiveDecayPhysics());
   // phys->RegisterPhysics(new G4DecayPhysics());


        
  // UserAction classes
  runManager->SetUserAction( new LYSODetPrimaryGeneratorAction(myLYSODetUserInformation) );
  runManager->SetUserAction( new LYSODetRunAction(myLYSODetAnalysis, myLYSODetUserInformation) );  
  runManager->SetUserAction( new LYSODetEventAction(myLYSODetAnalysis, myLYSODetUserInformation) );
  runManager->SetUserAction( new LYSODetSteppingAction(myLYSODetUserInformation) );
  runManager->SetUserAction( new LYSODetTrackingAction(myLYSODetUserInformation) );

  //Initialize G4 kernel
  runManager->Initialize();
  

 G4UIsession * session = 0;
 
    
  //get the pointer to the User Interface manager 
  G4UImanager * UI = G4UImanager::GetUIpointer();  

//   UI->ApplyCommand("/tracking/verbose 11");
//   UI->ApplyCommand("/stepping/verbose 11");

  if(argc==1)
    // Define (G)UI terminal for interactive mode  
    { 
     

#if defined(G4UI_USE_QT)
      session = new G4UIQt(argc,argv); 
      cout << "defining QT" << endl;
#elif defined(G4UI_USE_XM)
      session = new G4UIXm(argc,argv);
#elif defined(G4UI_USE_TCSH)
      session = new G4UIterminal(new G4UItcsh);
#else
      session = new G4UIterminal();
#endif

    }

#ifdef G4VIS_USE
  // Visualization, if you choose to have it!
  //G4VisManager* visManager = new LYSODetVisManager();
  G4VisManager* visManager = new G4VisExecutive;
  visManager->Initialize();
#endif

  if(session)
    {
      
#if defined(G4UI_USE_XM) || defined(G4UI_USE_WIN32) || defined(G4UI_USE_QT)
      // Customize the G4UIXm,Win32 menubar with a macro file :
      UI->ApplyCommand("/control/execute macros/gui.mac");
#endif

      // UI->ApplyCommand("/control/execute vis.mac");    
      session->SessionStart();
      delete session;
    }
  else
    // Batch mode
    { 
      G4String command = "/control/execute ";
      G4String fileName = argv[1];
      UI->ApplyCommand(command+fileName);
    }

#ifdef G4VIS_USE
  delete visManager;
#endif
  delete runManager;
  
  return 0;
}
